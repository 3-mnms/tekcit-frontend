name: "üü¢ tekcit-frontend ‚Äì Docker Build & GitOps Dispatch (nginx-client only)"

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: tekcit-frontend-${{ github.ref_name }}
  cancel-in-progress: true

env:
  SERVICE: fe-user                                      # GitOpsÍ∞Ä Ïù∏ÏãùÌïòÎäî ÏÑúÎπÑÏä§Î™Ö
  IMAGE:   ${{ secrets.DOCKER_USERNAME }}/nginx-client  # Î†àÏßÄÏä§Ìä∏Î¶¨ Ïù¥ÎØ∏ÏßÄÎ™Ö
  DEVOPS_REPO: 3-mnms/gitops-repo

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      # ‚õ≥Ô∏è ÌÉÄÏûÖÏ≤¥ÌÅ¨ ÏóÜÏù¥ Î≤àÎì§Îßå ÏÉùÏÑ± (tsc ÎØ∏Ïã§Ìñâ)
      - name: Install deps
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build (vite only, no typecheck)
        run: npx vite build

      - name: Verify dist exists
        run: |
          test -d dist || { echo "‚ùå dist not found"; exit 1; }
          ls -al dist | head -n 50

      # üß© CI Ï†ÑÏö© DockerfileÏùÑ ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ± (heredoc ÎåÄÏã† printf ÏÇ¨Ïö©)
      - name: Create runtime Dockerfile (CI-only)
        run: |
          set -euo pipefail

          # 1) Dockerfile.ci ÏÉùÏÑ±
          printf '%s\n' \
            'FROM nginx:1.27-alpine' \
            'COPY default.conf /etc/nginx/conf.d/default.conf' \
            'COPY dist /usr/share/nginx/html' \
            'EXPOSE 80' \
            'CMD ["nginx","-g","daemon off;"]' > Dockerfile.ci

          # 2) Nginx ÏÑ§Ï†ï: repoÏóê deploy/nginx.conf ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ SPA Í∏∞Î≥∏ ÏÉùÏÑ±
          if [ -f deploy/nginx.conf ]; then
            cp deploy/nginx.conf default.conf
          else
            printf '%s\n' \
              'server {' \
              '  listen 80;' \
              '  server_name _;' \
              '  root /usr/share/nginx/html;' \
              '  index index.html;' \
              '' \
              '  location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico)$ {' \
              '    try_files $uri =404;' \
              '    expires 7d;' \
              '    add_header Cache-Control "public, max-age=604800, immutable";' \
              '  }' \
              '' \
              '  location / {' \
              '    try_files $uri /index.html;' \
              '  }' \
              '' \
              '  location = /healthz {' \
              '    add_header Content-Type text/plain;' \
              '    return 200 "ok";' \
              '  }' \
              '}' > default.conf
          fi

          echo "== Dockerfile.ci =="; cat Dockerfile.ci
          echo "== default.conf ==";  sed -n '1,120p' default.conf

      - name: ‚è±Ô∏è Tag & Env
        run: |
          echo "TAG=v$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          if [ "${GITHUB_REF_NAME}" = "main" ]; then echo "ENV=prod" >> $GITHUB_ENV; else echo "ENV=develop" >> $GITHUB_ENV; fi

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=raw,value=${{ env.TAG }}
            type=sha
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci          # ‚Üê Î∞©Í∏à ÎßåÎì† CI Ï†ÑÏö© Dockerfile ÏÇ¨Ïö©
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Dispatch to GitOps
        uses: peter-evans/repository-dispatch@v3
        with:
          token:  ${{ secrets.GH_PAT }}
          repository: ${{ env.DEVOPS_REPO }}
          event-type: image-updated
          client-payload: |
            {
              "service": "${{ env.SERVICE }}",
              "image":   "${{ env.IMAGE }}",
              "tag":     "${{ env.TAG }}",
              "env":     "${{ env.ENV }}"
            }