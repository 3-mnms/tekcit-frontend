name: "💚 nginx-client – Docker Build & GitOps Dispatch"

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: nginx-client-${{ github.ref_name }}
  cancel-in-progress: true

env:
  SERVICE: nginx-client
  IMAGE:   ${{ secrets.DOCKER_USERNAME }}/nginx-client
  DEVOPS_REPO: 3-mnms/gitops-repo

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      # 타입체크 없이 번들만 생성 (tsc 미실행)
      - name: Install deps
        run: npm ci --prefer-offline --no-audit --no-fund

      # ENV 생성
      - name: Prepare env.js
        run: |
          mkdir -p public
          
          if [ ! -f public/env.js ]; then
            echo "public/env.js not found. Creating temporary empty env.js..."
            printf 'window.__ENV__ = {\n' \
                   '  API_URL: "",\n' \
                   '  VITE_PORTONE_STORE_ID: "",\n' \
                   '  VITE_PORTONE_CHANNEL_KEY: ""\n' \
                   '};\n' > public/env.js
          fi

      - name: Build (vite only, no typecheck)
        run: npx vite build

      - name: Verify dist exists
        run: |
          test -d dist || { echo "❌ dist not found"; exit 1; }
          ls -al dist | head -n 50

      # 빌드 산출물 전용 컨텍스트 생성 (.dockerignore, 루트 Dockerfile 영향 회피)
      - name: Create CI build context (Dockerfile + default.conf + dist)
        run: |
          set -euo pipefail

          # 1) default.conf 준비: repo에 있으면 사용, 없으면 SPA 기본 생성
          if [ -f deploy/nginx.conf ]; then
            cp deploy/nginx.conf default.conf
          else
            printf '%s\n' \
              'server {' \
              '  listen 80;' \
              '  server_name _;' \
              '  root /usr/share/nginx/html;' \
              '  index index.html;' \
              '' \
              '  location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico)$ {' \
              '    try_files $uri =404;' \
              '    expires 7d;' \
              '    add_header Cache-Control "public, max-age=604800, immutable";' \
              '  }' \
              '' \
              '  location / {' \
              '    try_files $uri /index.html;' \
              '  }' \
              '' \
              '  location = /healthz {' \
              '    add_header Content-Type text/plain;' \
              '    return 200 "ok";' \
              '  }' \
              '}' > default.conf
          fi

          # 2) ci-context 생성 및 파일 복사
          rm -rf ci-context
          mkdir -p ci-context
          cp -r dist ci-context/dist
          cp default.conf ci-context/default.conf

          
          # 3) 컨텍스트용 Dockerfile 생성
          cat > ci-context/Dockerfile <<'DOCKER'
          FROM nginx:1.27-alpine
          COPY default.conf /etc/nginx/conf.d/default.conf
          COPY dist /usr/share/nginx/html
          EXPOSE 80
          CMD ["nginx","-g","daemon off;"]
          DOCKER

          echo "== ci-context =="
          ls -al ci-context
          echo "== ci-context/dist (head) =="
          ls -al ci-context/dist | head -n 30

      - name: ⏱️ Tag
        run: echo "TAG=v$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            # 타임스탬프 태그
            type=raw,value=${{ env.TAG }}
            # git sha 태그
            type=sha
            # 고정 별칭
            type=raw,value=v0.1
            # latest (develop/main 모두 발행)
            type=raw,value=latest

      - uses: docker/build-push-action@v5
        with:
          context: ./ci-context
          file: ./ci-context/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # develop → gitops-repo에 develop-gke,develop-aws 동시 반영(한 번의 디스패치)
      - name: Dispatch to GitOps (develop-gke + develop-aws)
        if: ${{ github.ref_name == 'develop' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token:  ${{ secrets.GH_PAT }}
          repository: ${{ env.DEVOPS_REPO }}
          event-type: image-updated
          client-payload: |
            {
              "service": "nginx-client",
              "image":   "${{ env.IMAGE }}",
              "tag":     "${{ env.TAG }}",
              "targets": "develop-gke,develop-aws"
            }

      # main → gitops-repo에 prod 반영
      - name: Dispatch to GitOps (prod)
        if: ${{ github.ref_name == 'main' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token:  ${{ secrets.GH_PAT }}
          repository: ${{ env.DEVOPS_REPO }}
          event-type: image-updated
          client-payload: |
            {
              "service": "nginx-client",
              "image":   "${{ env.IMAGE }}",
              "tag":     "${{ env.TAG }}",
              "env":     "prod"
            }
